# Vagrant.configure("2") do |config|
#   config.vm.box = "hashicorp/bionic64"
# end

$script = <<-'SCRIPT'
# kubelet requires swap off
swapoff -a
# keep swap off after reboot
sudo sed -i 's/\/swap/#&/' /etc/fstab
SCRIPT

$k8s = <<-'SCRIPT'
sudo apt-get update
sudo apt-get install -y apt-transport-https ca-certificates curl

sudo curl -fsSLo /etc/apt/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg

echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list

sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl
SCRIPT

$containerd = <<-'SCRIPT'
sudo apt-get remove docker docker-engine docker.io containerd runc

sudo apt-get update
sudo apt-get install \
    ca-certificates \
    curl \
    gnupg \
    lsb-release

sudo mkdir -m 0755 -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

sudo apt-get update
sudo chmod a+r /etc/apt/keyrings/docker.gpg
sudo apt-get update
sudo apt-get install containerd.io

sudo mkdir -p /etc/containerd
containerd config default | sudo tee /etc/containerd/config.toml
sudo systemctl restart containerd


cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

sudo modprobe overlay
sudo modprobe br_netfilter

# sysctl params required by setup, params persist across reboots
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF

# Apply sysctl params without reboot
sudo sysctl --system

SCRIPT

# This defines the version of vagrant
Vagrant.configure(2) do |config|
  # Specifying the box we wish to use
    config.vm.box = "bento/ubuntu-22.04"
  # Adding Bridged Network Adapter
  # config.vm.network "public_network"
  config.vm.network "private_network", :type => 'dhcp'
  
  # Iterating the loop for three times
  (1..3).each do |i|
    # Defining VM properties
    config.vm.define "node-#{i}" do |node|
      node.vm.hostname = "node-#{i}"
      # node.vm.network "private_network", :type => 'dhcp'
      # Specifying the provider as VMWare and naming the VM's
      config.vm.provider "virtualbox" do |v|
        # The VM will be named as node-{i}
        # if setup this parameter will raise error,
        # because only the lastest nodename will be used, even when creating the first node, maybe it's a bug
        # v.name = "node-#{i}"
        # v.gui = true
        v.linked_clone = true
        v.check_guest_additions = false
      end

      node.vm.provision "shell", inline: $script
      # node.vm.provision "shell", inline: $k8s
      # node.vm.provision "shell", inline: $containerd
    end
  end
end
