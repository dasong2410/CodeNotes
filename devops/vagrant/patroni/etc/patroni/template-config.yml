scope: "17-test"
namespace: "/pg/"
name: pg-{num}

etcd3:
  hosts: {1}:2379, {2}:2379, {3}:2379
  protocol: https
  cacert: /home/data/certs/ca.pem
  cert: /home/data/certs/etcd/etcd.pem
  key: /home/data/certs/etcd/etcd-key.pem

restapi:
  listen: {0}:8008
  connect_address: {0}:8008
  cafile: /home/data/certs/ca.pem
  certfile: /home/data/certs/patroni/patroni.pem
  keyfile: /home/data/certs/patroni/patroni-key.pem
  authentication:
    username: adm
    password: Unknown-Each-Scratch5-Magical-Banjo

ctl:
  insecure: false # Allow connections to SSL sites without certs
  cacert: /home/data/certs/ca.pem
  certfile: /home/data/certs/patroni/patroni.pem
  keyfile: /home/data/certs/patroni/patroni-key.pem

bootstrap:
  # Custom bootstrap method
  # The options --scope= and --datadir= are passed to the custom script by
  # patroni and passed on to pg_createcluster by pg_createcluster_patroni
  method: pg_createcluster
  pg_createcluster:
    command: /usr/share/patroni/pg_createcluster_patroni

  # This section will be written into /<namespace>/<scope>/config after
  # initializing a new cluster and all other cluster members will use it as a
  # `global configuration`
  dcs:
    ttl: 30
    loop_wait: 10
    retry_timeout: 10
    maximum_lag_on_failover: 1048576
    check_timeline: true
#    master_start_timeout: 300
#    synchronous_mode: false
#    standby_cluster:
#      host: 127.0.0.1
#      port: 1111
#      primary_slot_name: patroni
    postgresql:
      use_pg_rewind: true
      remove_data_directory_on_rewind_failure: true
      remove_data_directory_on_diverged_timelines: true
      use_slots: true
      # The following parameters are given as command line options
      # overriding the settings in postgresql.conf.
      parameters:
        wal_level: logical
        hot_standby: true
        wal_keep_size: 1024
        max_wal_senders: 10
        max_replication_slots: 10
        max_worker_processes: 8
        wal_log_hints: true
        track_commit_timestamp: false

        unix_socket_directories: '/var/run/postgresql/'
        max_connections: 400
        logging_collector: true
        log_directory: '/var/log/postgresql'
        log_destination: 'jsonlog'
        log_filename: 'postgresql-17-test.log'
        log_rotation_age: 0
        log_rotation_size: 0

#      recovery_conf:
#        restore_command: cp ../wal_archive/%f %p
      # Set pg_hba.conf to the following values after bootstrapping or cloning.
      # If you want to allow regular connections from the local network, or
      # want to use pg_rewind, you need to uncomment the fourth entry.
      pg_hba:
      - local   all             all                                     peer
      - host    all             all             127.0.0.1/32            scram-sha-256
      - host    all             all             ::1/128                 scram-sha-256
      - host    all             all             0.0.0.0/0               scram-sha-256
      - local   replication     all                                     peer
      - host    replication     all             127.0.0.1/32            scram-sha-256
      - host    replication     all             ::1/128                 scram-sha-256
      - host    replication     all             0.0.0.0/0               scram-sha-256
#  # Some possibly desired options for 'initdb'. Note: It needs to be a list
#  # (some options need values, others are # switches)
#  initdb:
#  - encoding: UTF8
#  - data-checksums

#  # Additional script to be launched after initial cluster creation (will be
#  # passed the connection URL as parameter)
#  post_init: /usr/local/bin/setup_cluster.sh

#  # Additional users to be created after initializing the cluster
#  users:
#    foo:
#      password: bar
#      options:
#        - createrole
#        - createdb

postgresql:
  # Custom clone method
  # The options --scope= and --datadir= are passed to the custom script by
  # patroni and passed on to pg_createcluster by pg_clonecluster_patroni
  create_replica_method:
    - pg_clonecluster
  pg_clonecluster:
    command: /usr/share/patroni/pg_clonecluster_patroni

  # Listen to all interfaces by default, this makes vip-manager work
  # out-of-the-box without having to set net.ipv4.ip_nonlocal_bind or similar.
  # If you prefer to only listen on some interfaces, edit the below:
#  listen: "@HOSTIP@@LISTEN_VIP@,127.0.0.1:@PORT@"
  listen: "*:5435"
  connect_address: {0}:5435
  use_unix_socket: true
  # Default Debian/Ubuntu directory layout
  data_dir: /var/lib/postgresql/17/test
  bin_dir: /usr/lib/postgresql/17/bin
  config_dir: /etc/postgresql/17/test
  pgpass: /var/lib/postgresql/17-test.pgpass
  authentication:
    replication:
      username: "repl"
      password: "qK86J2raaK#vyz"
    # A superuser role is required in order for Patroni to manage the local
    # Postgres instance.  If the option `use_unix_socket' is set to `true',
    # then specifying an empty password results in no md5 password for the
    # superuser being set and sockets being used for authentication. The
    # `password:' line is nevertheless required.  Note that pg_rewind will not
    # work if no md5 password is set unless a rewind user is configured, see
    # below.
    superuser:
      username: "postgres"
      password: "m#iA8wGGA8x@CU"
    # A rewind role can be specified in order for Patroni to use on PostgreSQL
    # 11 or later for pg_rewind, i.e. rewinding a former primary after failover
    # without having to re-clone it. Patroni will assign this user the
    # necessary permissions (that only exist from PostgreSQL)
#    rewind:
#      username: "rewind"
#      password: "rewind-pass"

log:
   type: json
   dir: /var/log/postgresql
   format:
      - asctime: ts
      - levelname: level
      - module
      - message
   static_fields:
      app: patroni

tags:
  failover_priority: {fp}
